// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module poca_main_process_block_N (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_val,
        keys_val,
        cipher_keysize,
        cipher_direction,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] input_val;
input  [1919:0] keys_val;
input  [31:0] cipher_keysize;
input  [31:0] cipher_direction;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] round_count_fu_107_p3;
reg   [3:0] round_count_reg_219;
reg   [3:0] i_fu_46;
wire   [3:0] i_2_fu_133_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln38_fu_128_p2;
reg   [127:0] empty_fu_50;
wire   [127:0] add_ln40_fu_160_p2;
wire   [0:0] icmp_ln30_1_fu_87_p2;
wire   [0:0] icmp_ln30_fu_81_p2;
wire   [0:0] or_ln30_fu_101_p2;
wire   [3:0] select_ln30_fu_93_p3;
wire   [10:0] shl_ln_fu_139_p3;
wire   [1919:0] zext_ln40_fu_147_p1;
wire   [1919:0] lshr_ln40_fu_151_p2;
wire   [127:0] trunc_ln40_fu_156_p1;
wire   [0:0] icmp_ln43_fu_176_p2;
wire   [127:0] add_ln44_fu_181_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_fu_50 <= input_val;
    end else if (((icmp_ln38_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_fu_50 <= add_ln40_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_46 <= 4'd0;
    end else if (((icmp_ln38_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_46 <= i_2_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        round_count_reg_219[2 : 1] <= round_count_fu_107_p3[2 : 1];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln38_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_160_p2 = (trunc_ln40_fu_156_p1 + empty_fu_50);

assign add_ln44_fu_181_p2 = ($signed(empty_fu_50) + $signed(128'd340282366920938463463374607431768211435));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((icmp_ln43_fu_176_p2[0:0] == 1'b1) ? add_ln44_fu_181_p2 : empty_fu_50);

assign i_2_fu_133_p2 = (i_fu_46 + 4'd1);

assign icmp_ln30_1_fu_87_p2 = ((cipher_keysize == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_81_p2 = ((cipher_keysize == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_128_p2 = ((i_fu_46 == round_count_reg_219) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_176_p2 = ((cipher_direction == 32'd1) ? 1'b1 : 1'b0);

assign lshr_ln40_fu_151_p2 = keys_val >> zext_ln40_fu_147_p1;

assign or_ln30_fu_101_p2 = (icmp_ln30_fu_81_p2 | icmp_ln30_1_fu_87_p2);

assign round_count_fu_107_p3 = ((or_ln30_fu_101_p2[0:0] == 1'b1) ? select_ln30_fu_93_p3 : 4'd14);

assign select_ln30_fu_93_p3 = ((icmp_ln30_1_fu_87_p2[0:0] == 1'b1) ? 4'd10 : 4'd12);

assign shl_ln_fu_139_p3 = {{i_fu_46}, {7'd0}};

assign trunc_ln40_fu_156_p1 = lshr_ln40_fu_151_p2[127:0];

assign zext_ln40_fu_147_p1 = shl_ln_fu_139_p3;

always @ (posedge ap_clk) begin
    round_count_reg_219[0] <= 1'b0;
    round_count_reg_219[3] <= 1'b1;
end

endmodule //poca_main_process_block_N
