// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module poca_main_generate_round_keys (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_val,
        cipher_keysize,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] key_val;
input  [31:0] cipher_keysize;
output  [1919:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_01_fu_42;
wire   [3:0] i_9_fu_79_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln9_fu_73_p2;
reg   [1919:0] empty_fu_46;
wire   [1919:0] or_ln11_fu_134_p2;
wire   [255:0] zext_ln11_fu_85_p1;
wire   [10:0] shl_ln_fu_94_p3;
wire   [1919:0] zext_ln11_1_fu_102_p1;
wire   [1919:0] shl_ln11_fu_106_p2;
wire   [1919:0] xor_ln11_fu_112_p2;
wire   [255:0] lshr_ln11_fu_89_p2;
wire   [1919:0] zext_ln11_2_fu_124_p1;
wire   [1919:0] and_ln11_fu_118_p2;
wire   [1919:0] shl_ln11_1_fu_128_p2;
wire   [0:0] icmp_ln14_fu_150_p2;
wire   [255:0] select_ln14_fu_155_p3;
wire   [255:0] xor_ln14_fu_163_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_01_fu_42 <= 4'd0;
    end else if (((icmp_ln9_fu_73_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_01_fu_42 <= i_9_fu_79_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_73_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_fu_46 <= or_ln11_fu_134_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln9_fu_73_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_73_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_73_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln11_fu_118_p2 = (xor_ln11_fu_112_p2 & empty_fu_46);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = {{empty_fu_46[1919:256]}, {xor_ln14_fu_163_p2}};

assign i_9_fu_79_p2 = (i_01_fu_42 + 4'd1);

assign icmp_ln14_fu_150_p2 = ((cipher_keysize != 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_73_p2 = ((i_01_fu_42 == 4'd11) ? 1'b1 : 1'b0);

assign lshr_ln11_fu_89_p2 = key_val >> zext_ln11_fu_85_p1;

assign or_ln11_fu_134_p2 = (shl_ln11_1_fu_128_p2 | and_ln11_fu_118_p2);

assign select_ln14_fu_155_p3 = ((icmp_ln14_fu_150_p2[0:0] == 1'b1) ? 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 : 256'd0);

assign shl_ln11_1_fu_128_p2 = zext_ln11_2_fu_124_p1 << zext_ln11_1_fu_102_p1;

assign shl_ln11_fu_106_p2 = 1920'd115792089237316195423570985008687907853269984665640564039457584007913129639935 << zext_ln11_1_fu_102_p1;

assign shl_ln_fu_94_p3 = {{i_01_fu_42}, {7'd0}};

assign xor_ln11_fu_112_p2 = (shl_ln11_fu_106_p2 ^ 1920'd94971145180789141405469863695884969990692470634685116742800956330585166286696033875105787408321105016172948848387979899381078776548058719274153038481919330076987462588432197778346974895637755344856609332899271782077461008182119361693275785914457910967149403472811089067095457018656127063791202559391107981952290497413671516189054715030212151457729925746607341068107450556036691253445520158175442766273106804460580598760425795931407058821363012979657287013264796313022267140908229491284859997425339970007394059640858536497878915778164024704513828250590897948604589281308443672575);

assign xor_ln14_fu_163_p2 = (select_ln14_fu_155_p3 ^ key_val);

assign zext_ln11_1_fu_102_p1 = shl_ln_fu_94_p3;

assign zext_ln11_2_fu_124_p1 = lshr_ln11_fu_89_p2;

assign zext_ln11_fu_85_p1 = i_01_fu_42;

endmodule //poca_main_generate_round_keys
