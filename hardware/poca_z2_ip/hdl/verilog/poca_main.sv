// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poca_main_poca_main,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=8706,HLS_SYN_LUT=17878,HLS_VERSION=2023_1}" *)

module poca_main (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] length_r;
wire   [255:0] key;
wire   [127:0] iv_or_nonce;
wire   [63:0] plaintext;
wire   [63:0] ciphertext;
wire   [31:0] cipher_mode;
wire   [31:0] cipher_keysize;
wire   [31:0] cipher_direction;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state39;
reg   [31:0] cipher_mode_read_reg_647;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_state56;
reg    gmem0_blk_n_AW;
wire    ap_CS_fsm_state46;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_state59;
reg    gmem0_blk_n_B;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
reg   [31:0] cipher_direction_read_reg_636;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
wire   [30:0] grp_fu_314_p3;
reg   [30:0] reg_338;
wire    ap_CS_fsm_state2;
wire   [127:0] grp_process_block_N_fu_304_ap_return;
reg   [127:0] reg_342;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state58;
reg   [31:0] cipher_keysize_read_reg_641;
reg   [63:0] ciphertext_read_reg_651;
reg   [63:0] plaintext_read_reg_656;
reg   [127:0] iv_or_nonce_read_reg_661;
reg   [255:0] key_read_reg_668;
reg   [31:0] length_r_read_reg_673;
wire   [30:0] trunc_ln52_fu_348_p1;
reg   [30:0] trunc_ln52_reg_682;
wire   [127:0] grp_generate_round_keys_fu_296_ap_return[14:0];
reg   [127:0] keys_reg_687[14:0];
wire   [31:0] zext_ln100_fu_401_p1;
reg   [31:0] zext_ln100_reg_747;
reg   [127:0] prev_3_reg_762;
reg   [127:0] prev_1_load_reg_768;
wire    ap_CS_fsm_state13;
wire   [127:0] xor_ln103_fu_447_p2;
reg   [127:0] xor_ln103_reg_773;
wire    ap_CS_fsm_state15;
wire   [31:0] zext_ln93_fu_463_p1;
reg   [31:0] zext_ln93_reg_784;
reg   [127:0] gmem0_addr_4_read_reg_799;
wire   [127:0] xor_ln95_fu_505_p2;
reg   [127:0] xor_ln95_reg_804;
wire    ap_CS_fsm_state32;
wire   [31:0] zext_ln83_fu_527_p1;
reg   [31:0] zext_ln83_reg_815;
wire   [31:0] zext_ln77_fu_543_p1;
reg   [31:0] zext_ln77_reg_827;
reg   [127:0] counter_load_reg_848;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln83_fu_577_p2;
reg   [127:0] gmem0_addr_2_read_reg_853;
wire   [127:0] xor_ln86_fu_608_p2;
reg   [127:0] xor_ln86_reg_858;
wire    ap_CS_fsm_state49;
reg   [127:0] gmem0_addr_read_reg_866;
wire    grp_generate_round_keys_fu_296_ap_start;
wire    grp_generate_round_keys_fu_296_ap_done;
wire    grp_generate_round_keys_fu_296_ap_idle;
wire    grp_generate_round_keys_fu_296_ap_ready;
wire    grp_process_block_N_fu_304_ap_start;
wire    grp_process_block_N_fu_304_ap_done;
wire    grp_process_block_N_fu_304_ap_idle;
wire    grp_process_block_N_fu_304_ap_ready;
reg   [127:0] grp_process_block_N_fu_304_input_val;
reg   [31:0] grp_process_block_N_fu_304_cipher_direction;
reg    gmem0_AWVALID;
wire    gmem0_AWREADY;
reg   [63:0] gmem0_AWADDR;
reg   [31:0] gmem0_AWLEN;
reg    gmem0_WVALID;
wire    gmem0_WREADY;
reg   [127:0] gmem0_WDATA;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
reg   [63:0] gmem0_ARADDR;
reg   [31:0] gmem0_ARLEN;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [127:0] gmem0_RDATA;
wire   [8:0] gmem0_RFIFONUM;
wire    gmem0_BVALID;
reg    gmem0_BREADY;
reg    grp_generate_round_keys_fu_296_ap_start_reg;
reg    grp_process_block_N_fu_304_ap_start_reg;
wire    ap_CS_fsm_state57;
wire  signed [63:0] sext_ln100_fu_390_p1;
wire  signed [63:0] sext_ln100_1_fu_406_p1;
wire  signed [63:0] sext_ln93_fu_452_p1;
wire  signed [63:0] sext_ln93_1_fu_468_p1;
wire  signed [63:0] sext_ln83_fu_516_p1;
wire  signed [63:0] sext_ln77_fu_532_p1;
wire  signed [63:0] sext_ln83_1_fu_548_p1;
wire  signed [63:0] sext_ln77_1_fu_559_p1;
reg    ap_predicate_op158_writeresp_state21;
reg    ap_predicate_op160_writeresp_state21;
reg    ap_block_state21;
reg    ap_block_state39_io;
reg    ap_block_state46_io;
reg   [127:0] prev_1_fu_116;
reg   [30:0] i_4_fu_120;
wire   [30:0] add_ln100_fu_429_p2;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln100_fu_424_p2;
reg   [127:0] prev_fu_124;
reg   [30:0] i_3_fu_128;
wire   [30:0] add_ln93_fu_491_p2;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln93_fu_486_p2;
reg   [127:0] counter_fu_132;
wire   [127:0] counter_1_fu_592_p2;
reg   [30:0] i_2_fu_136;
wire   [30:0] add_ln83_fu_582_p2;
reg   [30:0] i_fu_140;
wire   [30:0] add_ln77_fu_625_p2;
wire    ap_CS_fsm_state55;
wire   [0:0] icmp_ln77_1_fu_620_p2;
wire   [0:0] icmp_ln77_fu_352_p2;
wire   [59:0] grp_fu_320_p4;
wire   [59:0] grp_fu_329_p4;
wire   [31:0] zext_ln100_1_fu_420_p1;
wire   [31:0] zext_ln93_1_fu_482_p1;
wire   [31:0] zext_ln83_1_fu_573_p1;
wire   [31:0] zext_ln77_1_fu_616_p1;
reg   [62:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 grp_generate_round_keys_fu_296_ap_start_reg = 1'b0;
#0 grp_process_block_N_fu_304_ap_start_reg = 1'b0;
end

aes_generate_round_keys grp_generate_round_keys_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_generate_round_keys_fu_296_ap_start),
    .ap_done(grp_generate_round_keys_fu_296_ap_done),
    .ap_idle(grp_generate_round_keys_fu_296_ap_idle),
    .ap_ready(grp_generate_round_keys_fu_296_ap_ready),
    .key(key_read_reg_668),
    .cipher_keysize(cipher_keysize_read_reg_641),
    .ap_return(grp_generate_round_keys_fu_296_ap_return)
);

aes_process_block grp_process_block_N_fu_304(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_process_block_N_fu_304_ap_start),
    .ap_done(grp_process_block_N_fu_304_ap_done),
    .ap_idle(grp_process_block_N_fu_304_ap_idle),
    .ap_ready(grp_process_block_N_fu_304_ap_ready),
    .input_r(grp_process_block_N_fu_304_input_val),
    .keys(keys_reg_687),
    .cipher_keysize(cipher_keysize_read_reg_641),
    .cipher_direction(grp_process_block_N_fu_304_cipher_direction),
    .cipher_mode(cipher_mode_read_reg_647),
    .ap_return(grp_process_block_N_fu_304_ap_return)
);

poca_main_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .length_r(length_r),
    .key(key),
    .iv_or_nonce(iv_or_nonce),
    .plaintext(plaintext),
    .ciphertext(ciphertext),
    .cipher_mode(cipher_mode),
    .cipher_keysize(cipher_keysize),
    .cipher_direction(cipher_direction),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

poca_main_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 128 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_ARADDR),
    .I_ARLEN(gmem0_ARLEN),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RFIFONUM(gmem0_RFIFONUM),
    .I_AWVALID(gmem0_AWVALID),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(gmem0_AWADDR),
    .I_AWLEN(gmem0_AWLEN),
    .I_WVALID(gmem0_WVALID),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(gmem0_WDATA),
    .I_WSTRB(16'd65535),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(gmem0_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_generate_round_keys_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_generate_round_keys_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_generate_round_keys_fu_296_ap_ready == 1'b1)) begin
            grp_generate_round_keys_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_process_block_N_fu_304_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln83_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47)))) begin
            grp_process_block_N_fu_304_ap_start_reg <= 1'b1;
        end else if ((grp_process_block_N_fu_304_ap_ready == 1'b1)) begin
            grp_process_block_N_fu_304_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd2))) begin
        counter_fu_132 <= iv_or_nonce_read_reg_661;
    end else if (((icmp_ln83_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        counter_fu_132 <= counter_1_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd2))) begin
        i_2_fu_136 <= 31'd0;
    end else if (((icmp_ln83_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_2_fu_136 <= add_ln83_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
        i_3_fu_128 <= 31'd0;
    end else if (((icmp_ln93_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        i_3_fu_128 <= add_ln93_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
        i_4_fu_120 <= 31'd0;
    end else if (((icmp_ln100_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_4_fu_120 <= add_ln100_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd0))) begin
        i_fu_140 <= 31'd0;
    end else if (((icmp_ln77_1_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        i_fu_140 <= add_ln77_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
        prev_1_fu_116 <= iv_or_nonce_read_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        prev_1_fu_116 <= prev_3_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
        prev_fu_124 <= iv_or_nonce_read_reg_661;
    end else if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        prev_fu_124 <= reg_342;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_direction_read_reg_636 <= cipher_direction;
        cipher_keysize_read_reg_641 <= cipher_keysize;
        cipher_mode_read_reg_647 <= cipher_mode;
        ciphertext_read_reg_651 <= ciphertext;
        iv_or_nonce_read_reg_661 <= iv_or_nonce;
        key_read_reg_668 <= key;
        length_r_read_reg_673 <= length_r;
        plaintext_read_reg_656 <= plaintext;
        trunc_ln52_reg_682 <= trunc_ln52_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        counter_load_reg_848 <= counter_fu_132;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        gmem0_addr_2_read_reg_853 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        gmem0_addr_4_read_reg_799 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        gmem0_addr_read_reg_866 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        keys_reg_687 <= grp_generate_round_keys_fu_296_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        prev_1_load_reg_768 <= prev_1_fu_116;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        prev_3_reg_762 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd0)) | ((cipher_direction_read_reg_636 == 32'd1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1)) | ((cipher_direction_read_reg_636 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1)))) begin
        reg_338 <= grp_fu_314_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state48))) begin
        reg_342 <= grp_process_block_N_fu_304_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln103_reg_773 <= xor_ln103_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        xor_ln86_reg_858 <= xor_ln86_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xor_ln95_reg_804 <= xor_ln95_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln100_reg_747[30 : 0] <= zext_ln100_fu_401_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd0))) begin
        zext_ln77_reg_827[30 : 0] <= zext_ln77_fu_543_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd2))) begin
        zext_ln83_reg_815[30 : 0] <= zext_ln83_fu_527_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        zext_ln93_reg_784[30 : 0] <= zext_ln93_fu_463_p1[30 : 0];
    end
end

always @ (*) begin
    if ((gmem0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((gmem0_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_process_block_N_fu_304_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0)))) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((gmem0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_generate_round_keys_fu_296_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

always @ (*) begin
    if ((gmem0_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

assign ap_ST_fsm_state32_blk = 1'b0;

always @ (*) begin
    if ((grp_process_block_N_fu_304_ap_done == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state39_io)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state46_io)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

always @ (*) begin
    if (((gmem0_RVALID == 1'b0) | (grp_process_block_N_fu_304_ap_done == 1'b0))) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

always @ (*) begin
    if ((gmem0_RVALID == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((grp_process_block_N_fu_304_ap_done == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd0))) begin
        gmem0_ARADDR = sext_ln77_fu_532_p1;
    end else if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd2))) begin
        gmem0_ARADDR = sext_ln83_fu_516_p1;
    end else if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem0_ARADDR = sext_ln93_fu_452_p1;
    end else if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem0_ARADDR = sext_ln100_fu_390_p1;
    end else begin
        gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd0))) begin
        gmem0_ARLEN = zext_ln77_fu_543_p1;
    end else if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd2))) begin
        gmem0_ARLEN = zext_ln83_fu_527_p1;
    end else if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem0_ARLEN = zext_ln93_fu_463_p1;
    end else if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem0_ARLEN = zext_ln100_fu_401_p1;
    end else begin
        gmem0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd0)) | ((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd0))) begin
        gmem0_AWADDR = sext_ln77_1_fu_559_p1;
    end else if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd2))) begin
        gmem0_AWADDR = sext_ln83_1_fu_548_p1;
    end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        gmem0_AWADDR = sext_ln93_1_fu_468_p1;
    end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem0_AWADDR = sext_ln100_1_fu_406_p1;
    end else begin
        gmem0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd0))) begin
        gmem0_AWLEN = zext_ln77_reg_827;
    end else if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd2))) begin
        gmem0_AWLEN = zext_ln83_reg_815;
    end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        gmem0_AWLEN = zext_ln93_reg_784;
    end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem0_AWLEN = zext_ln100_reg_747;
    end else begin
        gmem0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd0)) | ((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        gmem0_AWVALID = 1'b1;
    end else begin
        gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (ap_predicate_op160_writeresp_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | (~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (ap_predicate_op158_writeresp_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | (~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (1'b1 
    == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd2)) | (~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (1'b1 == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd0)))) begin
        gmem0_BREADY = 1'b1;
    end else begin
        gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem0_RVALID == 1'b0) | (grp_process_block_N_fu_304_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state48)) | ((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56)))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem0_WDATA = xor_ln86_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state59))) begin
        gmem0_WDATA = reg_342;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem0_WDATA = xor_ln103_reg_773;
    end else begin
        gmem0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        gmem0_WVALID = 1'b1;
    end else begin
        gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b1 == ap_CS_fsm_state39) & (cipher_mode_read_reg_647 == 32'd0)))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd0)))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((cipher_direction_read_reg_636 == 32'd1) & (1'b1 == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd1)) | ((cipher_direction_read_reg_636 == 32'd0) & (1'b1 == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd1)) | ((1'b1 == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd2)) | ((1'b1 == ap_CS_fsm_state21) & (cipher_mode_read_reg_647 == 32'd0)))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state56))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state59))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_process_block_N_fu_304_cipher_direction = cipher_direction_read_reg_636;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_process_block_N_fu_304_cipher_direction = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_process_block_N_fu_304_cipher_direction = 32'd1;
    end else begin
        grp_process_block_N_fu_304_cipher_direction = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_process_block_N_fu_304_input_val = gmem0_addr_read_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_process_block_N_fu_304_input_val = counter_load_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_process_block_N_fu_304_input_val = xor_ln95_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_process_block_N_fu_304_input_val = prev_3_reg_762;
    end else begin
        grp_process_block_N_fu_304_input_val = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (cipher_direction_read_reg_636 == 32'd1) & (1'b1 == ap_CS_fsm_state2) & (cipher_mode_read_reg_647 == 32'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & ((cipher_mode_read_reg_647 == 32'd0) | (cipher_mode_read_reg_647 == 32'd2)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((grp_generate_round_keys_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & ((~(cipher_mode_read_reg_647 == 32'd1) & ~(cipher_mode_read_reg_647 == 32'd2) & ~(cipher_mode_read_reg_647 == 32'd0)) | (~(cipher_direction_read_reg_636 == 32'd1) & ~(cipher_direction_read_reg_636 == 32'd0) & (cipher_mode_read_reg_647 == 32'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln100_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_process_block_N_fu_304_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if ((~(((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0))) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln93_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_process_block_N_fu_304_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39) & ((cipher_mode_read_reg_647 == 32'd0) | (cipher_mode_read_reg_647 == 32'd2)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46) & (cipher_mode_read_reg_647 == 32'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln83_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if ((~((gmem0_RVALID == 1'b0) | (grp_process_block_N_fu_304_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln77_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_process_block_N_fu_304_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((gmem0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_429_p2 = (i_4_fu_120 + 31'd1);

assign add_ln77_fu_625_p2 = (i_fu_140 + 31'd1);

assign add_ln83_fu_582_p2 = (i_2_fu_136 + 31'd1);

assign add_ln93_fu_491_p2 = (i_3_fu_128 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

always @ (*) begin
    ap_block_state21 = (((ap_predicate_op160_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((ap_predicate_op158_writeresp_state21 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (cipher_mode_read_reg_647 == 32'd0)));
end

always @ (*) begin
    ap_block_state39_io = (((gmem0_ARREADY == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_ARREADY == 1'b0) & (cipher_mode_read_reg_647 == 32'd0)));
end

always @ (*) begin
    ap_block_state46_io = (((gmem0_AWREADY == 1'b0) & (cipher_mode_read_reg_647 == 32'd2)) | ((gmem0_AWREADY == 1'b0) & (cipher_mode_read_reg_647 == 32'd0)));
end

always @ (*) begin
    ap_predicate_op158_writeresp_state21 = ((cipher_direction_read_reg_636 == 32'd1) & (cipher_mode_read_reg_647 == 32'd1));
end

always @ (*) begin
    ap_predicate_op160_writeresp_state21 = ((cipher_direction_read_reg_636 == 32'd0) & (cipher_mode_read_reg_647 == 32'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign counter_1_fu_592_p2 = (counter_fu_132 + 128'd1);

assign grp_fu_314_p3 = ((icmp_ln77_fu_352_p2[0:0] == 1'b1) ? trunc_ln52_reg_682 : 31'd0);

assign grp_fu_320_p4 = {{plaintext_read_reg_656[63:4]}};

assign grp_fu_329_p4 = {{ciphertext_read_reg_651[63:4]}};

assign grp_generate_round_keys_fu_296_ap_start = grp_generate_round_keys_fu_296_ap_start_reg;

assign grp_process_block_N_fu_304_ap_start = grp_process_block_N_fu_304_ap_start_reg;

assign icmp_ln100_fu_424_p2 = (($signed(zext_ln100_1_fu_420_p1) < $signed(length_r_read_reg_673)) ? 1'b1 : 1'b0);

assign icmp_ln77_1_fu_620_p2 = (($signed(zext_ln77_1_fu_616_p1) < $signed(length_r_read_reg_673)) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_352_p2 = (($signed(length_r_read_reg_673) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_577_p2 = (($signed(zext_ln83_1_fu_573_p1) < $signed(length_r_read_reg_673)) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_486_p2 = (($signed(zext_ln93_1_fu_482_p1) < $signed(length_r_read_reg_673)) ? 1'b1 : 1'b0);

assign sext_ln100_1_fu_406_p1 = $signed(grp_fu_329_p4);

assign sext_ln100_fu_390_p1 = $signed(grp_fu_320_p4);

assign sext_ln77_1_fu_559_p1 = $signed(grp_fu_329_p4);

assign sext_ln77_fu_532_p1 = $signed(grp_fu_320_p4);

assign sext_ln83_1_fu_548_p1 = $signed(grp_fu_329_p4);

assign sext_ln83_fu_516_p1 = $signed(grp_fu_320_p4);

assign sext_ln93_1_fu_468_p1 = $signed(grp_fu_329_p4);

assign sext_ln93_fu_452_p1 = $signed(grp_fu_320_p4);

assign trunc_ln52_fu_348_p1 = length_r[30:0];

assign xor_ln103_fu_447_p2 = (reg_342 ^ prev_1_load_reg_768);

assign xor_ln86_fu_608_p2 = (reg_342 ^ gmem0_addr_2_read_reg_853);

assign xor_ln95_fu_505_p2 = (prev_fu_124 ^ gmem0_addr_4_read_reg_799);

assign zext_ln100_1_fu_420_p1 = i_4_fu_120;

assign zext_ln100_fu_401_p1 = reg_338;

assign zext_ln77_1_fu_616_p1 = i_fu_140;

assign zext_ln77_fu_543_p1 = reg_338;

assign zext_ln83_1_fu_573_p1 = i_2_fu_136;

assign zext_ln83_fu_527_p1 = reg_338;

assign zext_ln93_1_fu_482_p1 = i_3_fu_128;

assign zext_ln93_fu_463_p1 = reg_338;

always @ (posedge ap_clk) begin
    zext_ln100_reg_747[31] <= 1'b0;
    zext_ln93_reg_784[31] <= 1'b0;
    zext_ln83_reg_815[31] <= 1'b0;
    zext_ln77_reg_827[31] <= 1'b0;
end

endmodule //poca_main
